(define (accumulate combiner start n term)
    (if (= n 0)
        start
        (combiner (term n ) (accumulate combiner start (- n 1) term))
    )
)

(define (accumulate-tail combiner start n term)
    (if (= n 0)
        start
        (accumulate-tail combiner (combiner start (term n)) (- n 1) term)
    )
)

(define (partial-sums stream)
    (define (helper total stream)
         (if (null? stream)
             ()
             (cons-stream (+ (car stream) total) (helper (+ (car stream) total) (cdr-stream stream)))
         )
    )   
    (helper 0 stream)
)

(define (rle s)
  (define (count num stream)
      (if (null? (cdr-stream stream))
          (cons-stream num nil)
          (if (= (car stream) (car (cdr-stream stream)))
              (count (+ num 1) (cdr-stream stream))
              (cons-stream num (cdr-stream stream))
          )  
       )
  )
  (if (null? s)
      ()
      (cons-stream (list (car s) (car (count 1 s))) (rle (cdr-stream (count 1 s)))))
)